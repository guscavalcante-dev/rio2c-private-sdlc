@model RoleLecturerEditAppViewModel

@Html.AntiForgeryToken()
@Html.HiddenFor(m => m.Uid)



<div class="profile-info lecturer-role col-lg-12">
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    @Html.ValidationMessage("Titles", htmlAttributes: new { @class = "text-danger" })
    @if (Model.Titles != null && Model.Titles.Any())
    {
        for (int i = 0; i < Model.LanguagesOptions.Count(); i++)
        {
            var code = Model.Titles.ToList().FirstOrDefault(e => e.LanguageCode == Model.LanguagesOptions.ElementAt(i).Code);
            var codeValue = code != null ? code.Value : null;
            var languageCodeValue = code != null ? code.LanguageCode : null;
            var labelLanguage = Model.LanguagesOptions.ElementAt(i).Name.Contains("Português") ? Labels.Portuguese : Labels.English; 

            <div class="language col-lg-6">
                <label class="control-label">Função em @labelLanguage</label>
                <input type="text" maxlength="256" name="Titles[@i].Value" class="form-control" value="@codeValue" />
                <input type="hidden" value="@languageCodeValue" name="Titles[@i].LanguageCode" class="form-control" />
            </div>
        }
    }
    else
    {
        for (int i = 0; i < Model.LanguagesOptions.Count(); i++)
        {
            var codeValue = Model.LanguagesOptions.ElementAt(i).Code;
            var labelLanguage = Model.LanguagesOptions.ElementAt(i).Name.Contains("Português") ? Labels.Portuguese : Labels.English; 
            <div class="language col-lg-6">
                <label class="control-label">Função em @labelLanguage</label>
                <input type="text" maxlength="256" name="Titles[@i].Value" class="form-control" />
                <input type="hidden" value="@codeValue" name="Titles[@i].LanguageCode" class="form-control" />
            </div>
        }
    }

</div>

<div class="col-md-12">
    <input type="submit" value="Salvar" class="btn btn-default pull-right" />
</div>


