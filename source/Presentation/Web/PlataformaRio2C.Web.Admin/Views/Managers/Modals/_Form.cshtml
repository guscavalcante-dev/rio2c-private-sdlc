@using PlataformaRio2C.Application.CQRS.Commands
@using Constants = PlataformaRio2C.Domain.Constants;
@model ManagerBaseCommand
<div class="kt-section">
    @Html.HiddenFor(m => m.IsCreatingNewManager)
    <div class="kt-section__content mt-3">
        <div class="form-group row">
            <div class="col-md-5">
                @Html.LabelFor(m => m.FirstName, new { @class = "control-label" })
                @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control", @autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-7">
                @Html.LabelFor(m => m.LastNames, new { @class = "control-label" }) <span class="form-optional-input text-muted">@Labels.Optional</span>
                @Html.TextBoxFor(m => m.LastNames, new { @class = "form-control", @autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.LastNames, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            <div class="col-md-12">
                @Html.LabelFor(m => m.Email, new { @class = "control-label" })
                @Html.TextBoxFor(m => m.Email, new { @class = "form-control", @autocomplete = "off" })
                <span class="form-text text-muted">@Messages.EmailInputMessage</span>
                @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
            </div>
        </div>
        @if (Model.IsCreatingNewManager == true)
        {
            <div class="form-group row">
                <div class="col-md-6">
                    @Html.LabelFor(m => m.Password, new { @class = "control-label" })
                    @Html.PasswordFor(m => m.Password, new { @class = "form-control showhidepassword", @autocomplete = "off" })
                    @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6">
                    @Html.LabelFor(m => m.ConfirmPassword, new { @class = "control-label" })
                    @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control showhidepassword", @autocomplete = "off" })
                    @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "text-danger" })
                </div>
            </div>
        }
    </div>
</div>

<div class="kt-section">
    <div class="kt-section__content mt-3">
        <div class="row">
            <div class="col-md-6">
                @Html.LabelFor(m => m.RoleName, new { @class = "control-label" })
                <select name="RoleName" id="RoleName" class="form-control enable-select2" @Html.GetUnobtrusiveValidationAttributesFor(m => m.RoleName)>
                    <option value="">@($"{Labels.Choose}...")</option>
                    @if (Model.Roles != null)
                    {
                        foreach (var role in Model.Roles)
                        {
                            <option value="@role.Name" @(Model.RoleName == role.Name ? "selected" : "") data-additionalinfo="@(role.Name == Constants.Role.AdminPartial)">
                                @role.Description
                            </option>
                        }
                    }
                </select>
                @Html.ValidationMessageFor(m => m.RoleName, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6" data-additionalinfo="RoleName">
                @Html.LabelFor(m => m.CollaboratorTypeNames, new { @class = "control-label" })
                <select name="CollaboratorTypeNames" id="CollaboratorTypeNames" class="form-control enable-select2" multiple="multiple" @Html.GetUnobtrusiveValidationAttributesFor(m => m.CollaboratorTypeNames)>
                    <option value="">@($"{Labels.Choose}...")</option>
                    @if (Model.CollaboratorTypes != null)
                    {
                        foreach (var collaboratorType in Model.CollaboratorTypes)
                        {
                            <option value="@collaboratorType.Name" @(Model.CollaboratorTypeNames?.Contains(collaboratorType.Name) == true ? "selected" : "")>
                                @collaboratorType.Description
                            </option>
                        }
                    }
                </select>
                @Html.ValidationMessageFor(m => m.CollaboratorTypeNames, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
</div>
